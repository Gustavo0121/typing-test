[tool.poetry]
name = "typing-test"
version = "0.2.0a1"
description = ""
authors = ["Gustavo0121 <gus0512san@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10,<3.14"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
taskipy = "^1.13.0"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"


[tool.poetry.group.lint.dependencies]
ruff = "^0.6.9"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
]
python_files = [
  "test_*.py",
  "*_test.py",
  "*_tests.py"
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fasttest: marks tests as fasttest (deselect with '-m \"not fasttest\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "except ImportError",
  "except (ModuleNotFoundError, ImportError)",
  "except ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]

[tool.ruff]
required-version = ">=0.3.0"

respect-gitignore = true

# indent
#indent-style = "space"
indent-width = 4

# Assume Python Version
target-version = "py310"

# Decrease the maximum line length to 79 character.
line-length = 79

namespace-packages = ["academic/project"]

# Allow imports relative to directories
src = ["academic/", "tests/", "examples/"]

fix = false
force-exclude = true

# Enumerate all fixed violations.
show-fixes = true

# By default, always show source code snippets.
#show-source = true

# warning: The `show-source` option has been deprecated in favor
# of `output-format`'s "full" and "concise" variants.
# Please update your configuration
# to use `output-format = <full|concise>` instead.
#output-format = "concise"
# Group violations by containing file.
# can be: "text" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure" "grouped"|full|concise
output-format = "full"

# Enable preview features.
preview = true
#docstring-code-format = true

[tool.ruff.format]
indent-style = "space"
quote-style="single"

[tool.ruff.lint]
task-tags = ["TODO", "FIXME"]

# Require explicit selection of preview rules.
explicit-preview-rules = true

# Allow applying all unsafe fixes in the `E` rules and `F401` without the `--unsafe-fixes` flag
extend-safe-fixes = ["E", "F401"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

# Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.
extend-fixable = ["B"]

select = [
  "A",    #flake8-builtins
  "AIR",    #Airflow
  "ANN",    #flake8-annotations
  "ARG",    #flake8-unused-arguments
  "ASYNC",    #flake8-async
  "B",    #flake8-bugbear
  "BLE",    #flake8-blind-except
  "C4",    #flake8-comprehensions
  "C90",    #mccabe
  "COM",    #flake8-commas
  "CPY",    #flake8-copyright
  "D",   # pydocstyle
  "DJ",    #flake8-django
  "DTZ",    #flake8-datetimez
  "E",   # pycodestyle
  "W",    #pycodestyle
  "EM",    #flake8-errmsg
  "ERA",    #eradicate
  "EXE",    #flake8-executable
  "F",   # pyflakes
  "FA",    #flake8-future-annotations
  "FBT",    #flake8-boolean-trap
  "FIX",    #flake8-fixme
  "FLY",    #flynt
  "FURB",    #refurb
  "G",    #flake8-logging-format
  "I",    #isort
  "ICN",    #flake8-import-conventions
  "INP",    #flake8-no-pep420
  "INT",    #flake8-gettext
  "ISC",    #flake8-implicit-str-concat
  "N",    #pep8-naming
  "NPY",    #NumPy-specific rules
  "PD",    #pandas-vet
  "PERF",    #Perflint
  "PGH",    #pygrep-hooks
  "PIE",    #flake8-pie
  "PL",    #Pylint
  "PT",    #flake8-pytest-style
  "PTH",    #flake8-use-pathlib
  "PYI",    #flake8-pyi
  "Q",    #flake8-quotes
  "RET",    #flake8-return
  "RSE",    #flake8-raise
  "RUF",    #Ruff-specific rules
  "S",    #flake8-bandit
  "SIM",    #flake8-simplify
  "SLF",    #flake8-self
  "SLOT",    #flake8-slots
  "T10",    #flake8-debugger
  "T20",    #flake8-print
  "TCH",    #flake8-type-checking
  "TD",    #flake8-todos
  "TID",    #flake8-tidy-imports
  "TRY",    #tryceratops
  "UP",  # pyupgrade
  "YTT",    #flake8-2020
]

# Never enforce `E501` (line length violations).
ignore = [
  "BLE001", # Exceptions aren't cataloged
  "T201",  # Print will be needed as a form of logging
  "INP001",
  "CPY001",
  "FA100",  # Conflit with mypy
  "UP006",  # Conflit with mypy
  "UP007",  # Conflit with mypy
  "ISC001",  # single-line-implicit-string-concatenation
]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
#"__init__.py" = ["E402"]
#"path/to/file.py" = ["E402"]
"**/{tutorial}/*" = ["N999"]
"**/{tests,docs,tools,utils}/*" = ["EXE002"]
"**/{*_tests,test_*,*_test}.py" = [
  "ANN001",
  "ANN101",
  "EXE002",
  "I001",
  "PLR6301",
  "S101",
  "ANN401",  # suppress due conflit with mypy
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 6

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-dummy-args = true
mypy-init-return = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-copyright]
author = "Ruff"
# Avoid enforcing a header on files smaller than 1024 bytes.
min-file-size = 2

[tool.ruff.lint.flake8-quotes]
# Don't bother trying to avoid escapes.
avoid-escape = false
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.pylint]
max-args = 4